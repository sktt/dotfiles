set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

  Plugin 'gmarik/vundle'
  Plugin 'scrooloose/nerdtree'
  Plugin 'altercation/vim-colors-solarized'
  Plugin 'wincent/command-t'
  Plugin 'pangloss/vim-javascript'
  Plugin 'tpope/vim-surround'
  Plugin 'Valloric/YouCompleteMe'
  Plugin 'scrooloose/syntastic'
  Plugin 'godlygeek/tabular'
  Plugin 'scrooloose/nerdcommenter'
  Plugin 'slim-template/vim-slim'
  Plugin 'groenewege/vim-less'
  Plugin 'plasticboy/vim-markdown'
  Plugin 'wavded/vim-stylus'
  Plugin 'digitaltoad/vim-jade'
  Plugin 'mattn/emmet-vim'
  Plugin 'bling/vim-airline'
  Plugin 'jistr/vim-nerdtree-tabs'
  Plugin 'tpope/vim-fugitive'
  Plugin 'kchmck/vim-coffee-script'
  Plugin 'Raimondi/delimitMate'
  Plugin 'editorconfig/editorconfig-vim' 
  Plugin 'mintplant/vim-literate-coffeescript'
  Plugin 'mxw/vim-jsx'
  Plugin 'jaxbot/syntastic-react'
  Plugin 'mtscout6/vim-cjsx'

call vundle#end()
filetype plugin indent on
syntax on

" -- BUNDLE CONFIGURATIONS 
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_extra_conf_globlist = ['~/.ycm_extra_conf.py']
let g:ycm_confirm_extra_conf = 0 " turn off confirmation
let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview 
" let g:ycm_add_preview_to_completeopt = 1 " add preview string
let g:ycm_autoclose_preview_window_after_completion = 1 " close preview automaticly
" let g:syntastic_always_populate_loc_list = 1
let g:CommandTMaxHeight=10
let g:CommandTMinHeight=5

let g:syntastic_javascript_checkers = ['jshint']
let g:airline_powerline_fonts = 1

let g:vim_markdown_folding_disabled=1

if &term =~ "xterm\\|rxvt" 
  :silent !echo -ne "\033]12;10\007"
  let &t_SI = "\<Esc>]12;4\x7"
  let &t_EI = "\<Esc>]12;10\x7"
  autocmd VimLeave * :!echo -ne "\033]12;10\007" 
endif 

" Better indents
" Don't wrap lines
set nowrap

set ts=2 sts=2 sw=2 expandtab

set backupdir=~/.vim/backup,~/.vim/tmp
set directory=~/.vim/backup,~/.vim/tmp

" + clipboard gets into the right place
" set clipboard=unnamedplus
"
" colorscheme
set background=dark


colorscheme solarized
" set row numbers
set number

" Leader key timeout
set timeoutlen=400
set ttimeoutlen=400

" Leader key mapping
let mapleader = " "
nnoremap <Space> <Nop>
nnoremap <Leader>h :set hlsearch!<CR>
nnoremap <Leader>nt :NERDTreeToggle<CR>
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>

" Exit insert mode mapping
imap öö <Esc><Esc>

" Macro
"   sudo save
command! W execute ':silent w !sudo tee % > /dev/null' | edit!
command! Q q

set statusline=%<%F%h%m%r%h%w%y\ %{&ff}\ %{strftime(\"%c\",getftime(expand(\"%:p\")))}%=\ lin:%l\,%L\ col:%c%V\ pos:%o\ ascii:%b\ %P
set laststatus=2

" shorter messages
set shortmess=a
"############################################
" Easier split navigation
"############################################
" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

nmap <leader>v :tabedit $MYVIMRC<CR>

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>
 
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

" typical tabularize use cases
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

nmap <C-N><C-N> :set relativenumber!<CR>


" Tim Pope auto tabularize | bar
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
 
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" jshint
let g:syntastic_javascript_jshint_conf="~/.jshintrc"

set mouse=a
"" awesome snippets
"
" Es6 function -> coffescript function
" $%dd^Os->^[F(i: ^[

